#!/usr/bin/env python
#
# Copyright 2012 SUSE Linux
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import argparse
import glob
import os
import re
import tarfile

import pkg_resources


def read_from_tarball(tar_name, filename):
    with tarfile.open(tar_name) as tar:
        try:
            file_found = min((f for f in tar.getnames()
                              if f.endswith(filename)),
                             key=len)
        except ValueError:
            raise Exception("Coud not find a file %s in %s" %
                            (filename, tar_name))
        t = tar.getmember(file_found)
        file_content = tar.extractfile(t).read()

    return file_content


def parse_update_spec_file(specfile, contents, run_requires):
    found_requires = set()
    all_requires = set()

    for d in run_requires:

        all_requires.add(d)

        if re.search(r'^(Build)?Requires(?:\(.*\))?:\s+%s' % (d), contents,
                     flags=re.MULTILINE | re.IGNORECASE) >= 0:
            found_requires.add(d)

        contents = re.sub(
            r'^(Requires(?:\(.*\))?:[ \t]+)(%s)(?:[ \t].*)?$' % (d),
            r'\g<1>\g<2>%s' %
            (" >= " + run_requires[d] if run_requires[d] else ""),
            contents, flags=re.MULTILINE | re.IGNORECASE)[:]

    if not specfile.endswith("-doc.spec"):
        spec_requires = set()
        for m in re.finditer(r"^Requires(?:\(.*\))?:[ \t]+python-([\w\d\.-]+)",
                             contents, flags=re.MULTILINE | re.IGNORECASE):
            spec_requires.add("python-%s" % m.group(1))

        if all_requires.difference(found_requires):
            for d in all_requires.difference(found_requires):
                print("ERROR: %s is missing in %s" % (d, specfile))

        for d in spec_requires.difference(all_requires):
            if d.lower() in all_requires:
                continue
            print("W: %s is not found in upstream" % d)

    return contents


def update_spec_files(run_requires):
    for specfile in glob.glob('./*.spec'):
        try:
            f = open(specfile, 'r+')
            contents = f.read()
            f.seek(0)
            f.truncate()
            contents = parse_update_spec_file(specfile, contents, run_requires)
            f.write(contents)
        finally:
            f.close()


def convert_pip_version_to_rpm(pip_version):

    rpm_version = []
    for s in pkg_resources.parse_version(pip_version)[:-1]:
        if s.isdigit():
            rpm_version.append(str(int(s)))
            continue
        elif s.startswith('*final'):
            rpm_version.append('0')
        else:
            break

    return '.'.join(rpm_version)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Python Requires')
    parser.add_argument('--outdir',
                        help='osc service parameter that does nothing')
    args = parser.parse_args()

    # Try to find the tarball
    candidates = set()
    for d in os.listdir('.'):
        if '.tar.' in d:
            candidates.add(d)

    candidates = list(candidates)
    candidates.sort(key=lambda i: (-len(i)))
    filename = candidates[0]

    for f in ('requirements-py2.txt', '/requirements.txt'):
        try:
            run_requires = read_from_tarball(filename, f)
        except Exception:
            run_requires = ""
        else:
            break

    try:
        test_requires = read_from_tarball(filename, '/test-requirements.txt')
    except Exception:
        test_requires = ""

    d = dict()

    for l in run_requires.split('\n') + test_requires.split('\n'):
        # strip away comments
        l = re.sub('#.*', ' ', l)
        # strip away whitespace
        l = re.sub('[ \t]*', '', l)

        if not l or l.startswith("-f"):
            continue

        m = re.match('^http://tarballs.openstack.org/([^/]+)/', l)
        if m:
            l = m.group(1)

        if re.match('^python-(.*)client', l):
            l = re.sub(r'^python-(.+client)', r'\g<1>', l)

        pkg = pkg_resources.Requirement.parse(l)
        pkg_name = pkg.unsafe_name
        version_dep = None
        strict_version_dep = None

        for dep in pkg.specs:
            if dep[0] == '>=':
                # try to use the lowest version available
                # i.e. for ">=0.8.4,>=0.9.7", select "0.8.4"
                if not version_dep or \
                   pkg_resources.parse_version(dep[1]) < \
                   pkg_resources.parse_version(version_dep):
                    version_dep = dep[1]
            elif dep[0] == '==':
                # same here - select lowest version
                if not strict_version_dep or \
                   pkg_resources.parse_version(dep[1]) < \
                   pkg_resources.parse_version(strict_version_dep):
                    strict_version_dep = dep[1]

        if version_dep:
            d["python-%s" % (pkg_name)] = version_dep
        elif strict_version_dep:
            # We are not as strict as upstream, we always allow newer versions
            # otherwise upgrading is a PITA
            d["python-%s" % (pkg_name)] = strict_version_dep
        elif len(pkg_name):
            d["python-%s" % (pkg_name)] = None

    ignore_requires = (
        'python-coverage',
        'python-sphinx', 'python-setuptools_git',
        'python-setuptools',
        'python-setuptools-git', 'python-distribute',
        'python-pylint', 'python-hacking',
        'python-docutils', 'python-oslo.sphinx', 'python-oslosphinx')

    real_requires = dict()
    for k in set(d).difference(ignore_requires):
        real_requires[k] = d[k]

    update_spec_files(real_requires)
